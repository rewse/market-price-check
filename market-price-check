#!/usr/bin/env python3
###############################################################################
# @(#) Market Price Checker
#
# Get a price from stocks.finance.yahoo.co.jp or www.msn.com.
#
#
# MIT License
#
# Copyright (c) 2020 Shibata, Tats
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
###############################################################################
# {{{ const

__version__ = "3.1"

YAHOO_BASE_URL = "http://stocks.finance.yahoo.co.jp/stocks/detail"
MSN_BASE_URL = "http://www.msn.com/ja-jp/money/stockdetails/"

USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"

#}}}
# {{{ import

from bs4 import BeautifulSoup
import getopt
import requests
import sys

# }}}
# {{{ usage()

def usage():
    print("""
[USAGE] market-price-check [-p provider ] [-V] <CODE>

OPTION:
    -p, --provider        Choose a price provider. You can choose "yahoo" or
                          "msn". (Default: yahoo)
    -V, --version         Output version information and exit

RETURN CODE:
    0                     Success
    1                     Error but you can fix yourself
    2                     Critical Error
   -1                     Unexpected Error. File a bug
""", file=sys.stderr)

# }}}
# {{{ version()

def version():
    print("Market Price Checker %s " % (__version__))

# }}}
# {{{ Option

class Option(object):
    def __init__(self, opts, args):
        self.provider = "yahoo"

        self._set_opts(opts)
        self._set_args(args)

    def _set_opts(self, opts):
        for o, a in opts:
            if o in ("-p", "--provider"):
                if a in ("yahoo", "msn"):
                    self.provider = a
                else:
                    print("[ERROR] Invalid PROVIDER", file=sys.stderr)
                    usage()
                    sys.exit(1)

            if o in ("-V", "--version"):
                version()
                sys.exit(1)

    def _set_args(self, args):
        if len(args) > 0:
            self.code = args[0]
        else:
            self.code = input("Code: ")

# }}}
# {{{ valid_opt()

def valid_opt(argv):
    try:
        opts, args = getopt.gnu_getopt(
            argv[1:],
            "p:V",
            ["provider=", "version"]
        )
    except getopt.GetoptError:
        print("[ERROR] Unknown option", file=sys.stderr)
        usage()
        sys.exit(1)

    return Option(opts, args)

# }}}
# {{{ get_price()

def get_price(code, provider):
    if provider == "yahoo":
        soup = BeautifulSoup(
            requests.get(YAHOO_BASE_URL, params = {"code": code}).text,
            "html.parser"
        )

        # Search a price from a page for stock
        tags = soup.select(".stoksPrice")
        
        if len(tags) > 0:
            return tags[-1].get_text().replace(",", "")

        # Search a price from a page for fund
        tag = soup.select_one("._1VJbpQWy ._3BGK5SVf")

        if tag is not None:
            return tag.get_text().replace(",", "")

        # Search a price from a page for index
        tag = soup.select_one(".wlbmIy9W ._3BGK5SVf")

        if tag is not None:
            return tag.get_text().replace(",", "")
    elif provider == "msn":
        soup = BeautifulSoup(
            requests.get(
                MSN_BASE_URL,
                params = {"symbol": code},
                headers = {"User-Agent": USER_AGENT}
            ).text,
            "html.parser"
        )

        tag = soup.select_one(".current-price")

        if tag is not None:
            price = tag.get_text()
            
            if price:
                return price.replace(",", "")
    else:
        print("[ERROR] Invalid PROVIDER", file=sys.stderr)
        usage()
        sys.exit(1)

    return "-----"

# }}}
# {{{ main()

def main():
    opt = valid_opt(sys.argv)

    print(get_price(opt.code, opt.provider))

if __name__ == "__main__":
    main()